# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
soyisim <- giris_al("Soyisminizi girin: ")
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
soyisim <- giris_al("Soyisminizi girin: ")
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
soyisim <- giris_al("Soyisminizi girin: ")
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
soyisim <- giris_al("Soyisminizi girin: ")
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: " Mehmet)
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
isim <- params$isim
soyisim <- params$soyisim
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# İsim ve soyisim tanımları (otomatik giriş)
isim <- "Mehmet"
soyisim <- "Senel"
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# İsim ve soyisim tanımları (otomatik giriş)
isim <- "Mehmet"
soyisim <- "Senel"
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
knitr::opts_chunk$set(echo = TRUE)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# İsim ve soyisim tanımları (otomatik giriş)
isim <- "Mehmet"
soyisim <- "Senel"
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
# Rasgele tam sayılardan oluşan kare matris oluştur
set.seed(123) # Tekrar edilebilirlik için
matris <- matrix(sample(1:100, toplam_sesli_harf^2, replace = TRUE),
nrow = toplam_sesli_harf,
ncol = toplam_sesli_harf)
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
# Sesli harfleri sayan fonksiyon
sesli_harf_sayisi <- function(isim) {
# Sadece harf kontrolü
if (!grepl("^[a-zA-Z]+$", isim)) {
stop("Hata: Girdi yalnızca harflerden oluşmalıdır.")
}
sesli_harfler <- c("a", "e", "i", "o", "u", "A", "E", "I", "O", "U")
toplam <- sum(tolower(unlist(strsplit(isim, ""))) %in% sesli_harfler)
return(toplam)
}
# Kullanıcıdan geçerli isim ve soyisim al
giris_al <- function(metin) {
repeat {
deger <- readline(prompt = metin)
if (grepl("^[a-zA-Z]+$", deger)) {
return(deger)
} else {
cat("Hata: Girdi yalnızca harflerden oluşmalıdır. Lütfen tekrar deneyin.\n")
}
}
}
# İsim ve soyisim tanımları
isim <- giris_al("İsminizi girin: ")
senel
soyisim <- giris_al("Soyisminizi girin: ")
# Sesli harf sayılarını hesapla
toplam_sesli_harf <- sesli_harf_sayisi(isim) + sesli_harf_sayisi(soyisim)
# Rasgele tam sayılardan oluşan kare matris oluştur
set.seed(123) # Tekrar edilebilirlik için
matris <- matrix(sample(1:100, toplam_sesli_harf^2, replace = TRUE),
nrow = toplam_sesli_harf,
ncol = toplam_sesli_harf)
# Sonucu yazdır
print(matris)
# Verilen matrisi tanımlama
A <- matrix(c(31, 67, 14, 69,
79, 42, 25, 91,
51, 50, 90, 57,
14, 43, 91, 92),
nrow = 4, byrow = TRUE)
# Matrisi hesaplayarak özdeğerlerini bulma
eigenvalues <- eigen(A)$values
# İz (trace) hesaplama: özdeğerlerin toplamı
trace_A <- sum(eigenvalues)
# Determinant hesaplama: özdeğerlerin çarpımı
determinant_A <- prod(eigenvalues)
# Sonuçları gösterme
trace_A
determinant_A
# W'nin ters matrisi (W^-1)
W_inv <- matrix(c(1.5, -2.5, -0.5,
-1.75, 3.25, 0.75,
0.5, -0.5, -0.5),
nrow = 3, byrow = TRUE)
View(W_inv)
View(W_inv)
View(W_inv)
install.packages("mvtnorm")
library(mvtnorm)
library(ggplot2)
install.packages("viridis")
library(viridis)
detach("package:viridisLite", unload = TRUE)
library(viridisLite)
detach("package:viridis", unload = TRUE)
library(viridis)
detach("package:viridisLite", unload = TRUE)
library(viridisLite)
# Verilen notlar
notlar <- data.frame(
Olasılık = c(88, 91, 64, 83, 77, 45, 48, 51, 63, 65),
Matematiksel_İstatistik = c(76, 82, 72, 88, 80, 60, 44, 48, 61, 63),
Regresyon_Analizi = c(51, 70, 98, 66, 94, 55, 73, 64, 79, 44)
)
# Eşit ağırlıklı ortalamayı hesaplayalım
ortalama <- rowMeans(notlar)
# Ortalama 70'ten küçük olanları bulalım
kucuk_70 <- sum(ortalama < 70)
# Olasılığı hesaplayalım
olasilik <- kucuk_70 / nrow(notlar)
olasilik
## Q matrisi tanımlama
⁠ {r}
## Q matrisi tanımlama
Q_matrisi <- matrix(c(1, 0, 0,     # x1^2'nin katsayısı
0, 5, 3,     # x2^2 ve x2*x3'ün katsayıları
0, 3, 2),    # x3^2'nin katsayısı
nrow = 3, byrow = TRUE)
dogrusal_terimler <- c(-4, -8, -6)  # x1, x2, x3'ün doğrusal katsayıları
sabit_terim <- 9                    # Sabit terim
⁠
# Q fonksiyonu için matris ve vektör temsili
A <- matrix(c(1, 0, 0,
0, 5, 3,
0, 3, 2), nrow = 3, byrow = TRUE)  # Kovaryans matrisi
b <- c(-4, -8, -6)  # Lineer terimler
c <- 9  # Sabit terim
# Ortalama vektörü hesaplama
mu <- solve(A) %*% (-b / 2)
# Yayılım matrisi (Kovaryans matrisi)
cov_matrix <- solve(A)
# Varyans ve ortalamalar
variances <- diag(cov_matrix)
means <- as.vector(mu)
# En yüksek varyans ve en düşük ortalama
max_variance <- max(variances)
min_mean <- min(means)
max_var_index <- which(variances == max_variance)
min_mean_index <- which(means == min_mean)
cat("En yüksek yayılıma sahip değişken: x", max_var_index, "\n")
cat("En düşük ortalamaya sahip değişken: x", min_mean_index, "\n")
library(knitr)
library(kableExtra)
# Öğrencilerin Olasılık, Matematik ve Örnekleme derslerinden aldığı notları tanımlıyoruz
notlar <- data.frame(
Olasılık = c(88, 91, 64, 83, 77, 45, 48, 51, 63, 65),
Matematik = c(76, 82, 72, 88, 80, 60, 44, 48, 61, 63),
Ornekleme = c(51, 70, 98, 66, 94, 55, 73, 64, 79, 44)
)
# Ağırlıklı ortalamayı hesaplıyoruz (eşit ağırlıklı)
ortalama <- rowMeans(notlar)
# Ortalamanın standart sapmasını hesaplıyoruz
sd_ortalama <- sd(ortalama)
# Ortalama değer
mean_ortalama <- mean(ortalama)
# 70'ten küçük olma olasılığını hesaplamak için normal dağılım varsayımıyla z-skoru hesaplıyoruz
z_score <- (70 - mean_ortalama) / sd_ortalama
# Normal dağılımdan 70'ten küçük olma olasılığını hesaplıyoruz
olasilik_70_alt <- pnorm(z_score)
# Sonucu yazdırıyoruz
print(olasilik_70_alt)
# Öğrencilerin Olasılık, Matematik ve Örnekleme derslerinden aldığı notları tanımlıyoruz
notlar <- data.frame(
Olasılık = c(88, 91, 64, 83, 77, 45, 48, 51, 63, 65),
Matematik = c(76, 82, 72, 88, 80, 60, 44, 48, 61, 63),
Ornekleme = c(51, 70, 98, 66, 94, 55, 73, 64, 79, 44)
)
# Öğrencilerin Olasılık, Matematik ve Örnekleme derslerinden aldığı notları tanımlıyoruz
notlar <- data.frame(
Olasılık = c(88, 91, 64, 83, 77, 45, 48, 51, 63, 65),
Matematik = c(76, 82, 72, 88, 80, 60, 44, 48, 61, 63),
Ornekleme = c(51, 70, 98, 66, 94, 55, 73, 64, 79, 44)
)
# Ağırlıklı ortalamayı hesaplıyoruz (eşit ağırlıklı)
ortalama <- rowMeans(notlar)
# Ortalamanın standart sapmasını hesaplıyoruz
sd_ortalama <- sd(ortalama)
# Ortalama değer
mean_ortalama <- mean(ortalama)
# 70'ten küçük olma olasılığını hesaplamak için normal dağılım varsayımıyla z-skoru hesaplıyoruz
z_score <- (70 - mean_ortalama) / sd_ortalama
# Normal dağılımdan 70'ten küçük olma olasılığını hesaplıyoruz
olasilik_70_alt <- pnorm(z_score)
# Sonucu yazdırıyoruz
print(olasilik_70_alt)
# Verileri tanımlıyoruz
ogrenciler <- data.frame(
Ogrenci = c("Gizem", "Tuncay", "Can", "Tuğçe", "Görkem", "Akın", "Ebru", "Burcu", "Funda", "Hande"),
Olasilik = c(88, 91, 64, 83, 77, 45, 48, 51, 63, 65),
Matematik = c(76, 82, 72, 88, 80, 60, 44, 48, 61, 63),
Regresyon = c(51, 70, 98, 66, 94, 55, 73, 64, 79, 44)
)
# Ortalama hesaplama
ogrenciler$Y <- rowMeans(ogrenciler[, c("Olasilik", "Matematik", "Regresyon")])
View(ogrenciler)
# Shapiro-Wilk testi ile normallik kontrolü
shapiro.test(ogrenciler$Y)
# Ortalama ve standart sapma
mean_Y <- mean(ogrenciler$Y)
sd_Y <- sd(ogrenciler$Y)
# Z-skoru ve olasılık
z_score <- (70 - mean_Y) / sd_Y
probability <- pnorm(z_score)
# Sonucu yazdırma
print(probability)
